// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/pulse/pulse.go

// Package repositorymocks is a generated GoMock package.
package repositorymocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Edu4rdoNeves/ingestor-magalu/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIPulseRepository is a mock of IPulseRepository interface.
type MockIPulseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPulseRepositoryMockRecorder
}

// MockIPulseRepositoryMockRecorder is the mock recorder for MockIPulseRepository.
type MockIPulseRepositoryMockRecorder struct {
	mock *MockIPulseRepository
}

// NewMockIPulseRepository creates a new mock instance.
func NewMockIPulseRepository(ctrl *gomock.Controller) *MockIPulseRepository {
	mock := &MockIPulseRepository{ctrl: ctrl}
	mock.recorder = &MockIPulseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPulseRepository) EXPECT() *MockIPulseRepositoryMockRecorder {
	return m.recorder
}

// GetPulseByID mocks base method.
func (m *MockIPulseRepository) GetPulseByID(pulseID int) (*entity.PulseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPulseByID", pulseID)
	ret0, _ := ret[0].(*entity.PulseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPulseByID indicates an expected call of GetPulseByID.
func (mr *MockIPulseRepositoryMockRecorder) GetPulseByID(pulseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPulseByID", reflect.TypeOf((*MockIPulseRepository)(nil).GetPulseByID), pulseID)
}

// GetPulses mocks base method.
func (m *MockIPulseRepository) GetPulses(offset, limit int) ([]*entity.PulseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPulses", offset, limit)
	ret0, _ := ret[0].([]*entity.PulseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPulses indicates an expected call of GetPulses.
func (mr *MockIPulseRepositoryMockRecorder) GetPulses(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPulses", reflect.TypeOf((*MockIPulseRepository)(nil).GetPulses), offset, limit)
}

// SavePulseBatch mocks base method.
func (m *MockIPulseRepository) SavePulseBatch(ctx context.Context, pulses []*entity.PulseData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePulseBatch", ctx, pulses)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePulseBatch indicates an expected call of SavePulseBatch.
func (mr *MockIPulseRepositoryMockRecorder) SavePulseBatch(ctx, pulses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePulseBatch", reflect.TypeOf((*MockIPulseRepository)(nil).SavePulseBatch), ctx, pulses)
}
