// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/pulse/pulse.go

// Package repositoryMock is a generated GoMock package.
package repositoryMock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Edu4rdoNeves/ingestor-magalu/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIPulseRepository is a mock of IPulseRepository interface.
type MockIPulseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPulseRepositoryMockRecorder
}

// MockIPulseRepositoryMockRecorder is the mock recorder for MockIPulseRepository.
type MockIPulseRepositoryMockRecorder struct {
	mock *MockIPulseRepository
}

// NewMockIPulseRepository creates a new mock instance.
func NewMockIPulseRepository(ctrl *gomock.Controller) *MockIPulseRepository {
	mock := &MockIPulseRepository{ctrl: ctrl}
	mock.recorder = &MockIPulseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPulseRepository) EXPECT() *MockIPulseRepositoryMockRecorder {
	return m.recorder
}

// SavePulseBatch mocks base method.
func (m *MockIPulseRepository) SavePulseBatch(ctx context.Context, pulses []*entity.PulseData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePulseBatch", ctx, pulses)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePulseBatch indicates an expected call of SavePulseBatch.
func (mr *MockIPulseRepositoryMockRecorder) SavePulseBatch(ctx, pulses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePulseBatch", reflect.TypeOf((*MockIPulseRepository)(nil).SavePulseBatch), ctx, pulses)
}
