// Code generated by MockGen. DO NOT EDIT.
// Source: application/service/rabbitmq/rabbitmq.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRabbitMQ is a mock of IRabbitMQ interface.
type MockIRabbitMQ struct {
	ctrl     *gomock.Controller
	recorder *MockIRabbitMQMockRecorder
}

// MockIRabbitMQMockRecorder is the mock recorder for MockIRabbitMQ.
type MockIRabbitMQMockRecorder struct {
	mock *MockIRabbitMQ
}

// NewMockIRabbitMQ creates a new mock instance.
func NewMockIRabbitMQ(ctrl *gomock.Controller) *MockIRabbitMQ {
	mock := &MockIRabbitMQ{ctrl: ctrl}
	mock.recorder = &MockIRabbitMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRabbitMQ) EXPECT() *MockIRabbitMQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIRabbitMQ) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIRabbitMQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRabbitMQ)(nil).Close))
}

// Consumer mocks base method.
func (m *MockIRabbitMQ) Consumer(handler func([]byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consumer indicates an expected call of Consumer.
func (mr *MockIRabbitMQMockRecorder) Consumer(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockIRabbitMQ)(nil).Consumer), handler)
}

// Publish mocks base method.
func (m *MockIRabbitMQ) Publish(body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIRabbitMQMockRecorder) Publish(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIRabbitMQ)(nil).Publish), body)
}

// PublishWithNewChannel mocks base method.
func (m *MockIRabbitMQ) PublishWithNewChannel(body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithNewChannel", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithNewChannel indicates an expected call of PublishWithNewChannel.
func (mr *MockIRabbitMQMockRecorder) PublishWithNewChannel(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithNewChannel", reflect.TypeOf((*MockIRabbitMQ)(nil).PublishWithNewChannel), body)
}
