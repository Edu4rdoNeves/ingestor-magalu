// Code generated by MockGen. DO NOT EDIT.
// Source: application/usecases/pulse/pulse.go

// Package Usecasemocks is a generated GoMock package.
package Usecasemocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/Edu4rdoNeves/ingestor-magalu/domain/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIPulseUseCase is a mock of IPulseUseCase interface.
type MockIPulseUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIPulseUseCaseMockRecorder
}

// MockIPulseUseCaseMockRecorder is the mock recorder for MockIPulseUseCase.
type MockIPulseUseCaseMockRecorder struct {
	mock *MockIPulseUseCase
}

// NewMockIPulseUseCase creates a new mock instance.
func NewMockIPulseUseCase(ctrl *gomock.Controller) *MockIPulseUseCase {
	mock := &MockIPulseUseCase{ctrl: ctrl}
	mock.recorder = &MockIPulseUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPulseUseCase) EXPECT() *MockIPulseUseCaseMockRecorder {
	return m.recorder
}

// GetPulseByID mocks base method.
func (m *MockIPulseUseCase) GetPulseByID(id int) (*dto.PulseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPulseByID", id)
	ret0, _ := ret[0].(*dto.PulseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPulseByID indicates an expected call of GetPulseByID.
func (mr *MockIPulseUseCaseMockRecorder) GetPulseByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPulseByID", reflect.TypeOf((*MockIPulseUseCase)(nil).GetPulseByID), id)
}

// GetPulses mocks base method.
func (m *MockIPulseUseCase) GetPulses(page, limit int) ([]*dto.PulseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPulses", page, limit)
	ret0, _ := ret[0].([]*dto.PulseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPulses indicates an expected call of GetPulses.
func (mr *MockIPulseUseCaseMockRecorder) GetPulses(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPulses", reflect.TypeOf((*MockIPulseUseCase)(nil).GetPulses), page, limit)
}

// PopulateQueueWithPulses mocks base method.
func (m *MockIPulseUseCase) PopulateQueueWithPulses(populateQueue *dto.PopulateQueueParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateQueueWithPulses", populateQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateQueueWithPulses indicates an expected call of PopulateQueueWithPulses.
func (mr *MockIPulseUseCaseMockRecorder) PopulateQueueWithPulses(populateQueue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateQueueWithPulses", reflect.TypeOf((*MockIPulseUseCase)(nil).PopulateQueueWithPulses), populateQueue)
}

// SavePulseBatch mocks base method.
func (m *MockIPulseUseCase) SavePulseBatch(ctx context.Context, pulseDto []*dto.PulseData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePulseBatch", ctx, pulseDto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePulseBatch indicates an expected call of SavePulseBatch.
func (mr *MockIPulseUseCaseMockRecorder) SavePulseBatch(ctx, pulseDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePulseBatch", reflect.TypeOf((*MockIPulseUseCase)(nil).SavePulseBatch), ctx, pulseDto)
}
