// Code generated by MockGen. DO NOT EDIT.
// Source: application/usecases/pulse/pulse.go

// Package usecaseMock is a generated GoMock package.
package usecaseMock

import (
	context "context"
	reflect "reflect"

	dto "github.com/Edu4rdoNeves/ingestor-magalu/domain/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIPulseUseCase is a mock of IPulseUseCase interface.
type MockIPulseUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIPulseUseCaseMockRecorder
}

// MockIPulseUseCaseMockRecorder is the mock recorder for MockIPulseUseCase.
type MockIPulseUseCaseMockRecorder struct {
	mock *MockIPulseUseCase
}

// NewMockIPulseUseCase creates a new mock instance.
func NewMockIPulseUseCase(ctrl *gomock.Controller) *MockIPulseUseCase {
	mock := &MockIPulseUseCase{ctrl: ctrl}
	mock.recorder = &MockIPulseUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPulseUseCase) EXPECT() *MockIPulseUseCaseMockRecorder {
	return m.recorder
}

// SavePulseBatch mocks base method.
func (m *MockIPulseUseCase) SavePulseBatch(ctx context.Context, pulseDto []*dto.PulseData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePulseBatch", ctx, pulseDto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePulseBatch indicates an expected call of SavePulseBatch.
func (mr *MockIPulseUseCaseMockRecorder) SavePulseBatch(ctx, pulseDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePulseBatch", reflect.TypeOf((*MockIPulseUseCase)(nil).SavePulseBatch), ctx, pulseDto)
}
